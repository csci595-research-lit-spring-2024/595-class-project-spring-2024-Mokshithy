from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        def dfs(node, color):
            colors[node] = color
            for neighbor in range(n):
                if graph[node][neighbor] == 1 and colors[neighbor] == -1:
                    dfs(neighbor, color)
        
        colors = [-1] * n
        curr_color = 0
        for i in range(n):
            if colors[i] == -1:
                dfs(i, curr_color)
                curr_color += 1
        
        color_count = [0] * curr_color
        malware_count = [0] * curr_color
        for node in initial:
            color_count[colors[node]] += 1
            malware_count[colors[node]] += 1
        
        min_removal_node = min(initial)
        max_affected_nodes = 0
        for node in initial:
            color = colors[node]
            if malware_count[color] == 1:
                if color_count[color] > max_affected_nodes:
                    min_removal_node = node
                    max_affected_nodes = color_count[color]
                elif color_count[color] == max_affected_nodes and node < min_removal_node:
                    min_removal_node = node
        
        return min_removal_node
