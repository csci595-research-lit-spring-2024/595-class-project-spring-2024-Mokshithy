from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def dfs(node, color):
            colors[node] = color
            for nei, adj in enumerate(graph[node]):
                if adj == 1 and colors[nei] == -1:
                    dfs(nei, color)

        n = len(graph)
        colors = [-1] * n
        c = 0
        for i in range(n):
            if colors[i] == -1:
                dfs(i, c)
                c += 1

        counts = [0] * c
        for color in colors:
            counts[color] += 1

        malwares = [0] * c
        for ini in initial:
            malwares[colors[ini]] += 1

        result = (float('inf'), -1)
        for ini in initial:
            mal = malwares[colors[ini]]
            if mal == 1:
                if result[0] > counts[colors[ini]]:
                    result = (counts[colors[ini]], ini)
            if mal == 1:
                if result[0] == counts[colors[ini]]:
                    result = (result[0], min(result[1], ini))

        return result[1]

# Example usage
solution = Solution()
graph1 = [[1, 1, 0], [1, 1, 0], [0, 0, 1]]
initial1 = [0, 1]
print(solution.minMalwareSpread(graph1, initial1))  # Output: 0

graph2 = [[1, 1, 0], [1, 1, 1], [0, 1, 1]]
initial2 = [0, 1]
print(solution.minMalwareSpread(graph2, initial2))  # Output: 1

graph3 = [[1, 1, 0, 0], [1, 1, 1, 0], [0, 1, 1, 1], [0, 0, 1, 1]]
initial3 = [0, 1]
print(solution.minMalwareSpread(graph3, initial3))  # Output: 1
