from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def dfs(node, color):
            infected.add(node)
            colors[node] = color
            for nei, adj in enumerate(graph[node]):
                if adj == 1 and nei not in infected:
                    dfs(nei, color)
        
        n = len(graph)
        colors = {}
        infected = set()
        
        for node in initial:
            dfs(node, node)
        
        # Count the number of nodes in each color
        count = {}
        for color in colors.values():
            count[color] = count.get(color, 0) + 1
        
        # Count the number of nodes in each initial infected color
        initial_count = {}
        for node in initial:
            initial_count[colors[node]] = initial_count.get(colors[node], 0) + 1
        
        # Calculate the influence in each color and select the smallest index with maximum influence
        ans = min(initial)
        max_inf = 0
        for node in initial:
            curr_inf = count[colors[node]] == 1 and initial_count[colors[node]] == 1
            if curr_inf > max_inf:
                ans = node
                max_inf = curr_inf
            elif curr_inf == max_inf and node < ans:
                ans = node
        
        return ans
