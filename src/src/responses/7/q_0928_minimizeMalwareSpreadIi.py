from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def dfs(node, color):
            colors[node] = color
            for neighbor in range(len(graph)):
                if graph[node][neighbor] and colors[neighbor] == -1:
                    dfs(neighbor, color)
        
        n = len(graph)
        colors = [-1] * n
        color = 0
        for i in range(n):
            if colors[i] == -1:
                dfs(i, color)
                color += 1

        size = [0] * color
        malware = [0] * color
        for i in initial:
            size[colors[i]] += 1
            malware[colors[i]] += 1

        for i in range(n):
            for j in range(n):
                if graph[i][j]:
                    if colors[i] != colors[j]:
                        size[colors[i]] += size[colors[j]]

        min_node = -1
        max_saved = 0
        for i in initial:
            if malware[colors[i]] == 1:
                if size[colors[i]] > max_saved or (size[colors[i]] == max_saved and i < min_node):
                    min_node = i
                    max_saved = size[colors[i]]
        
        return min_node

# Example usage
sol = Solution()
graph1 = [[1,1,0],[1,1,0],[0,0,1]]
initial1 = [0, 1]
print(sol.minMalwareSpread(graph1, initial1))  # Output: 0

graph2 = [[1,1,0],[1,1,1],[0,1,1]]
initial2 = [0, 1]
print(sol.minMalwareSpread(graph2, initial2))  # Output: 1

graph3 = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]]
initial3 = [0, 1]
print(sol.minMalwareSpread(graph3, initial3))  # Output: 1
