from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def dfs(node, color):
            colors[node] = color
            for nei, adj in enumerate(graph[node]):
                if adj and colors[nei] == -1:
                    dfs(nei, color)
        
        n = len(graph)
        colors = [-1] * n
        color = 0
        for i in range(n):
            if colors[i] == -1:
                dfs(i, color)
                color += 1
        
        color_count = [0] * color
        node_count = [0] * color
        for init_node in initial:
            color_count[colors[init_node]] += 1
            node_count[colors[init_node]] += 1

        for init_node in initial:
            for nei, adj in enumerate(graph[init_node]):
                if adj and colors[nei] != -1:
                    color_count[colors[nei]] -= 1

        candidate = (-1, float('inf'))  # (node, count)
        for node in initial:
            if color_count[colors[node]] == 1:
                if node_count[colors[node]] < candidate[1]:
                    candidate = (node, node_count[colors[node]])
                elif node_count[colors[node]] == candidate[1] and node < candidate[0]:
                    candidate = (node, node_count[colors[node]])

        return candidate[0] if candidate[0] != -1 else min(initial)
