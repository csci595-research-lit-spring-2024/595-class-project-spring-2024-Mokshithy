from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        initial.sort()
        
        def dfs(node, color):
            colors[node] = color
            for nei, connected in enumerate(graph[node]):
                if connected and nei not in visited:
                    visited.add(nei)
                    dfs(nei, color)
        
        colors = [-1] * n
        current_color = 0
        for node in range(n):
            if colors[node] == -1:
                visited = set()
                dfs(node, current_color)
                current_color += 1
        
        infected_count = [0] * current_color
        for node in initial:
            infected_count[colors[node]] += 1
        
        node_frequency = [0] * n
        for node in initial:
            node_frequency[node] = infected_count[colors[node]] == 1
        
        result = [0, float('inf')]
        for node in initial:
            if node_frequency[node]:
                if infected_count[colors[node]] < result[1]:
                    result = [node, infected_count[colors[node]]]
                elif infected_count[colors[node]] == result[1]:
                    result = [min(node, result[0]), result[1]]
        
        return result[0]
