from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        parent = list(range(n))

        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            root_x = find(x)
            root_y = find(y)
            if root_x != root_y:
                parent[root_x] = root_y

        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    union(i, j)

        size = [0] * n
        malware = [0] * n
        for i in range(n):
            size[find(i)] += 1

        for node in initial:
            malware[find(node)] += 1

        result = (-1, float('inf'))  # (node, malware count)
        for node in initial:
            root = find(node)
            if malware[root] == 1:
                if size[root] < result[1]:
                    result = (node, size[root])
                elif size[root] == result[1] and node < result[0]:
                    result = (node, size[root])

        return result[0]
