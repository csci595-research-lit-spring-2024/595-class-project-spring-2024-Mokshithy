class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def dfs(node, malware):
            malwares[node] = malware
            for neighbor, connected in enumerate(graph[node]):
                if connected == 1 and malwares[neighbor] == -1:
                    dfs(neighbor, malware)
        
        n = len(graph)
        malwares = [-1] * n
        malware_groups = collections.defaultdict(list)
        malware_counts = collections.Counter()
        
        for malware in initial:
            dfs(malware, malware)
        
        for malware in malwares:
            if malware != -1:
                malware_groups[malware].append(malware)
        
        for _, mal_list in malware_groups.items():
            if len(mal_list) == 1:
                malware_counts[mal_list[0]] += 1
        
        if not malware_counts:
            return min(initial)
        
        malware_to_remove = min(mal_list, key=lambda x: (-malware_counts[x], x))
        return malware_to_remove
