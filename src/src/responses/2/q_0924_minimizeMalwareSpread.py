from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def dfs(node, color):
            colors[node] = color
            for nei, adj in enumerate(graph[node]):
                if adj == 1 and colors[nei] == -1:
                    dfs(nei, color)

        n = len(graph)
        colors = [-1] * n
        color = 0
        for node in range(n):
            if colors[node] == -1:
                dfs(node, color)
                color += 1

        size = [0] * color
        malware = [0] * color
        for node in initial:
            size[colors[node]] += 1
            malware[colors[node]] += 1

        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1 and colors[i] != colors[j]:
                    size[colors[i]] = float('-inf')

        max_malware = max(malware)
        res = float('inf')
        for node in initial:
            if malware[colors[node]] == max_malware:
                res = min(res, node)

        return res if res != float('inf') else min(initial)
